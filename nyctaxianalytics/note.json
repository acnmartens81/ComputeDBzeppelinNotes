{
  "paragraphs": [
    {
      "text": "%spark\nprintln(s\"\"\"%html\n\u003ch2\u003eWhat does this demo showcase?\u003c/h2\u003e\n\u003cp\u003eThe New York City Taxi \u0026 Limousine Commission has released the detailed historical dataset covering over 1.1 billion individual taxi trips in the city from January 2009 through June 2015. In this Analytics demo we only use data for Year 2013. We manage the trip and fare data in two tables (NYC_TAXI_TRIP, TAXI_TRIP_FARE). Each trip contains information like the driver\u0027s license info, the pickup and dropoff times and their precise locations, etc. The fare table contains the total charge along with tip amounts for each trip. The schema for the table is below. \nEach table is over a 150 million records and instead of managing all the data in memory we simply create two stratified samples. This requires only a fraction of the memory that would otherwise be required. \n\nIn this demo, we showcase the following:\n\u003ch4\u003e1)  Execute the query on the exact data noting the time it takes to parse parquet data and execute the query using Spark parallel processing  (LEFT PARAGRAPHS)\u003cbr\u003e\n2)  Execute the same query using Synopses data engine noting both the accuracy and response time of the answer. (RIGHT PARAGRAPHS)\u003cbr\u003e\n3)  We illustrate various features: constraining the error in query responses, Automatically swapping the approximate visualized plot with an exact response, projecting error rates as part of the query response and automatic query re-routing to underlying data source when error constraints cannot be satisfied. \u003c/h4\u003e\n\n\u003ch4\u003e\u003ci\u003eNOTE: The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy. Hence, the performance delta with sampling will be proportional to the data set size. \u003c/h4\u003e\n\"\"\")\n",
      "dateUpdated": "Oct 10, 2017 7:26:10 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "editorMode": "ace/mode/text",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003eWhat does this demo showcase?\u003c/h2\u003e\n\u003cp\u003eThe New York City Taxi \u0026 Limousine Commission has released the detailed historical dataset covering over 1.1 billion individual taxi trips in the city from January 2009 through June 2015. In this Analytics demo we only use data for Year 2013. We manage the trip and fare data in two tables (NYC_TAXI_TRIP, TAXI_TRIP_FARE). Each trip contains information like the driver\u0027s license info, the pickup and dropoff times and their precise locations, etc. The fare table contains the total charge along with tip amounts for each trip. The schema for the table is below. \nEach table is over a 150 million records and instead of managing all the data in memory we simply create two stratified samples. This requires only a fraction of the memory that would otherwise be required. \n\nIn this demo, we showcase the following:\n\u003ch4\u003e1)  Execute the query on the exact data noting the time it takes to parse parquet data and execute the query using Spark parallel processing  (LEFT PARAGRAPHS)\u003cbr\u003e\n2)  Execute the same query using Synopses data engine noting both the accuracy and response time of the answer. (RIGHT PARAGRAPHS)\u003cbr\u003e\n3)  We illustrate various features: constraining the error in query responses, Automatically swapping the approximate visualized plot with an exact response, projecting error rates as part of the query response and automatic query re-routing to underlying data source when error constraints cannot be satisfied. \u003c/h4\u003e\n\n\u003ch4\u003e\u003ci\u003eNOTE: The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy. Hence, the performance delta with sampling will be proportional to the data set size. \u003c/h4\u003e\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eWhat does this demo showcase?\u003c/h2\u003e\n\u003cp\u003eThe New York City Taxi \u0026 Limousine Commission has released the detailed historical dataset covering over 1.1 billion individual taxi trips in the city from January 2009 through June 2015. In this Analytics demo we only use data for Year 2013. We manage the trip and fare data in two tables (NYC_TAXI_TRIP, TAXI_TRIP_FARE). Each trip contains information like the driver\u0027s license info, the pickup and dropoff times and their precise locations, etc. The fare table contains the total charge along with tip amounts for each trip. The schema for the table is below. \nEach table is over a 150 million records and instead of managing all the data in memory we simply create two stratified samples. This requires only a fraction of the memory that would otherwise be required. \n\nIn this demo, we showcase the following:\n\u003ch4\u003e1)  Execute the query on the exact data noting the time it takes to parse parquet data and execute the query using Spark parallel processing  (LEFT PARAGRAPHS)\u003cbr\u003e\n2)  Execute the same query using Synopses data engine noting both the accuracy and response time of the answer. (RIGHT PARAGRAPHS)\u003cbr\u003e\n3)  We illustrate various features: constraining the error in query responses, Automatically swapping the approximate visualized plot with an exact response, projecting error rates as part of the query response and automatic query re-routing to underlying data source when error constraints cannot be satisfied. \u003c/h4\u003e\n\n\u003ch4\u003e\u003ci\u003eNOTE: The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy. Hence, the performance delta with sampling will be proportional to the data set size. \u003c/h4\u003e\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1474824483952_-1651972728",
      "id": "20160925-172803_1684905446",
      "dateCreated": "Sep 25, 2016 10:58:03 AM",
      "dateStarted": "Oct 26, 2016 12:56:15 PM",
      "dateFinished": "Oct 26, 2016 12:56:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Monitor the cluster, check memory consumption",
      "text": "%spark\nprintln(s\"\"\"%html\n \u003cdiv\u003e \u003cspan style\u003d\"font-weight: bold;\"\u003e \u003ca href\u003d\"http://localhost:5050\" target\u003d\"_blank\"\u003eSnappyData Pulse UI\u003c/a\u003e \u003c/span\u003e \u003cspan\u003e\u003ch5\u003e The Dashboard tab in the SnappyData Pulse UI can be used to monitor the cluster and check the memory consumed by the samples.\u003c/h5\u003e\u003c/span\u003e\u003c/div\u003e\n\"\"\")\n",
      "user": "anonymous",
      "dateUpdated": "Oct 11, 2017 7:59:14 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "title": true,
        "editorMode": "ace/mode/text",
        "editorHide": true,
        "colWidth": 12.0,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": " \u003cdiv\u003e \u003cspan style\u003d\"font-weight: bold;\"\u003e \u003ca href\u003d\"http://localhost:5050\" target\u003d\"_blank\"\u003eSnappyData Pulse UI\u003c/a\u003e \u003c/span\u003e \u003cspan\u003e\u003ch5\u003e The Dashboard tab in the SnappyData Pulse UI can be used to monitor the cluster and check the memory consumed by the samples.\u003c/h5\u003e\u003c/span\u003e\u003c/div\u003e\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490362972206_-396131444",
      "id": "20170324-134252_1246434891",
      "dateCreated": "Mar 24, 2017 1:42:52 PM",
      "dateStarted": "Oct 11, 2017 7:59:10 PM",
      "dateFinished": "Oct 11, 2017 7:59:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Let\u0027s load the data from S3 and create Stratified Samples (RUN THIS PARA ONCE)",
      "text": "%sql\n-- If launched using cloud service, the Snappydata DB would automatically resurrect the samples from disk. \n-- But, we still need to re-create Spark External tables so we have access to the FULL source data. \n-- CHECK http://localhost:5050/Snappy%20Store/ IF THE SAMPLES ARE ALREADY CREATED\n\n-- Commented as samples are recovered from disk on cluster startup\nDROP TABLE IF EXISTS NYCTAXI_pickuptime_sample;\nDROP TABLE IF EXISTS TAXIFARE_hackLicense_sample;\n\nDROP TABLE IF EXISTS NYC_TAXI_TRIP ;\nDROP TABLE IF EXISTS TAXI_TRIP_FARE;\n\n-- Spark SQL syntax to create tables with data in S3 (you can load from many disparate sources in Spark)\n-- External tables are registered  with Spark catalog and must be created each time the cluster is started.\n-- original data \u0027s3a://AKIAJ73BL2H66NACKJNQ:WdXRSski53xmmtQ3zZQnU1iTL+wqm5XCLSBAMrvf@zeppelindemo/nytaxitripdata_cleaned\u0027)\nCREATE EXTERNAL TABLE NYC_TAXI_TRIP USING PARQUET OPTIONS( path \u0027s3a://AKIAJ73BL2H66NACKJNQ:WdXRSski53xmmtQ3zZQnU1iTL+wqm5XCLSBAMrvf@zeppelindemo/1billDupNYCData\u0027);\nCREATE EXTERNAL TABLE TAXI_TRIP_FARE USING parquet OPTIONS(path \u0027s3a://AKIAJ73BL2H66NACKJNQ:WdXRSski53xmmtQ3zZQnU1iTL+wqm5XCLSBAMrvf@zeppelindemo/nyctaxifaredata_cleaned\u0027);\n\n-- You can also host the entire table in memory by removing the \u0027EXTERNAL\u0027 keyword assuming you have the memory available.\n-- For loading from other sources, checkout the Spark SQL guide here(LINK)\n\n-- Create 1% sample on hour(pickuptime). i.e. we have enough samples for each hour of the day\nCREATE SAMPLE TABLE NYCTAXI_pickuptime_sample ON NYC_TAXI_TRIP  OPTIONS (qcs \u0027hour(pickup_datetime)\u0027, fraction \u00270.01\u0027) AS (SELECT * FROM NYC_TAXI_TRIP);\n-- Create 1% sample on hack_license. There are about 20K hack_licenses (drivers) and we want to extract samples for each driver. \nCREATE SAMPLE TABLE TAXIFARE_hackLicense_sample on TAXI_TRIP_FARE OPTIONS (qcs \u0027hack_license\u0027, fraction \u00270.01\u0027) AS (SELECT * FROM TAXI_TRIP_FARE);\n\n\n-- Counts\n-- SELECT COUNT(*) FROM NYCTAXI_pickuptime_sample\n-- SELECT COUNT(*) FROM TAXIFARE_hacklicense_sample\n\n-- Checkout Pulse (link above) and the storage tab for the space consumed by the samples\nSELECT \u0027Data loaded\u0027;\n",
      "user": "anonymous",
      "dateUpdated": "Apr 23, 2019 10:38:25 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "iSight initialized",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "iSight initialized",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "editorHide": false,
        "colWidth": 12.0,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Data loaded\nData loaded\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 94 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523597_-42930032",
      "id": "20160913-064343_1431994890",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Apr 23, 2019 10:38:26 PM",
      "dateFinished": "Apr 23, 2019 10:51:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Schema for the table NYC_TAXI_TRIP",
      "text": "%spark\nsnc.table(\"nyc_taxi_trip\").printSchema",
      "user": "anonymous",
      "dateUpdated": "Apr 11, 2019 3:46:09 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "editorMode": "ace/mode/text",
        "title": true,
        "editorHide": false,
        "tableHide": false,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- medallion: string (nullable \u003d true)\n |-- hack_license: string (nullable \u003d true)\n |-- vendor_id: string (nullable \u003d true)\n |-- rate_code: integer (nullable \u003d true)\n |-- store_and_fwd_flag: string (nullable \u003d true)\n |-- pickup_datetime: string (nullable \u003d true)\n |-- dropoff_datetime: string (nullable \u003d true)\n |-- passenger_count: integer (nullable \u003d true)\n |-- trip_time_in_secs: integer (nullable \u003d true)\n |-- trip_distance: double (nullable \u003d true)\n |-- pickup_longitude: double (nullable \u003d true)\n |-- pickup_latitude: double (nullable \u003d true)\n |-- dropoff_longitude: double (nullable \u003d true)\n |-- dropoff_latitude: double (nullable \u003d true)\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "root\n |-- medallion: string (nullable \u003d true)\n |-- hack_license: string (nullable \u003d true)\n |-- vendor_id: string (nullable \u003d true)\n |-- rate_code: integer (nullable \u003d true)\n |-- store_and_fwd_flag: string (nullable \u003d true)\n |-- pickup_datetime: string (nullable \u003d true)\n |-- dropoff_datetime: string (nullable \u003d true)\n |-- passenger_count: integer (nullable \u003d true)\n |-- trip_time_in_secs: integer (nullable \u003d true)\n |-- trip_distance: double (nullable \u003d true)\n |-- pickup_longitude: double (nullable \u003d true)\n |-- pickup_latitude: double (nullable \u003d true)\n |-- dropoff_longitude: double (nullable \u003d true)\n |-- dropoff_latitude: double (nullable \u003d true)\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1475974231971_-1201342944",
      "id": "20161009-005031_439909397",
      "dateCreated": "Oct 9, 2016 6:20:31 AM",
      "dateStarted": "Apr 11, 2019 3:46:09 PM",
      "dateFinished": "Apr 11, 2019 3:46:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Comparing the number of records in base table and Sample table",
      "text": "%md\n",
      "dateUpdated": "Oct 10, 2016 5:48:53 AM",
      "config": {
        "enabled": false,
        "tableHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-102730_397816573",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Sep 26, 2016 7:49:35 AM",
      "dateFinished": "Sep 26, 2016 7:49:35 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How many rows in the Trip table?",
      "text": "%sql\n-- Fetch count\n\n\nselect count(*) count from nyc_taxi_trip;",
      "user": "anonymous",
      "dateUpdated": "Apr 21, 2019 8:25:30 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "COUNT",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "COUNT",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "COUNT\n1257724952\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 87046 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-102635_482610975",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Apr 21, 2019 8:25:30 PM",
      "dateFinished": "Apr 21, 2019 8:26:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How many rows using Synopses? Actual count in sample?",
      "text": "%sql\n-- Fetch count. count(*) is the estimate. \u0027sample_count\u0027 is built-in alias to showing the actual number of records in the selected sample. \n-- \u0027with error 0.1\u0027 - allow a maximum of 10% error in the answer. \n\nselect count(*) count, count(*) sample_count from nyc_taxi_trip with error 0.1 ;\n",
      "user": "anonymous",
      "dateUpdated": "Apr 21, 2019 8:27:04 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "COUNT",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "SAMPLE_COUNT",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "COUNT",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "editorHide": false,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "COUNT\tSAMPLE_COUNT\n1257724952\t12585024\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 2234 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-102147_1078513643",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Apr 21, 2019 8:27:04 PM",
      "dateFinished": "Apr 21, 2019 8:27:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "dateUpdated": "Oct 14, 2016 3:57:25 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "tableHide": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475083762937_705728123",
      "id": "20160928-172922_2055212016",
      "dateCreated": "Sep 28, 2016 10:59:22 AM",
      "dateStarted": "Sep 28, 2016 10:59:28 AM",
      "dateFinished": "Sep 28, 2016 10:59:28 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Number of Rides per week",
      "text": "%sql\n\nselect count(*) numOfRides, weekofyear(pickup_datetime) from nyc_taxi_trip \ngroup by weekofyear(pickup_datetime);\n\n",
      "user": "anonymous",
      "dateUpdated": "Apr 21, 2019 8:27:23 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "NUMOFRIDES",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUMOFRIDES\tweekofyear(CAST(PICKUP_DATETIME AS DATE))\n27851096\t12\n26769152\t42\n25105528\t36\n26756128\t24\n27355296\t50\n27282152\t49\n28016392\t20\n26093240\t22\n27368312\t37\n27163776\t38\n18156544\t31\n21407752\t27\n23779240\t35\n28092872\t8\n28625992\t7\n6929568\t1\n26532184\t29\n27456992\t45\n22798312\t48\n27576936\t47\n26063264\t39\n28082144\t18\n28309448\t16\n27929616\t19\n25874400\t28\n25655208\t30\n27467376\t44\n24376592\t34\n27063096\t23\n27827648\t17\n28829264\t9\n23641144\t33\n28253240\t15\n25968288\t6\n26100880\t21\n26874224\t41\n19898584\t52\n12803672\t5\n28573320\t10\n27996800\t14\n27404152\t43\n26408288\t51\n28948040\t11\n26796336\t13\n26755328\t40\n27095640\t46\n22938616\t32\n26360912\t26\n26311968\t25\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 199748 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-103717_1785005943",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Apr 21, 2019 8:27:23 PM",
      "dateFinished": "Apr 21, 2019 8:30:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Number of Rides per week  (Use Synopsis)",
      "text": "%sql \n\n-- \u0027With error 0.1\u0027 - allow 10% error and if cannot be met run against full table\nset spark.sql.shuffle.partitions\u003d7;\nselect count(*) numOfRides, weekofyear(pickup_datetime) from nyc_taxi_trip \ngroup by weekofyear(pickup_datetime) with error 0.1;\n",
      "user": "anonymous",
      "dateUpdated": "Apr 21, 2019 8:31:06 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "weekofyear(CAST(PICKUP_DATETIME AS DATE))",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "NUMOFRIDES",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUMOFRIDES\tweekofyear(CAST(PICKUP_DATETIME AS DATE))\n27801600\t12\n26759574\t42\n25126797\t36\n26830057\t24\n27288613\t50\n27316150\t49\n28021470\t20\n26123184\t22\n27438487\t37\n27220771\t38\n18189069\t31\n21306145\t27\n23765636\t35\n28030838\t8\n28639088\t7\n6942549\t1\n26540494\t29\n27494058\t45\n22716807\t48\n27645865\t47\n26054844\t39\n28075215\t18\n28347985\t16\n27894046\t19\n25819124\t28\n25652287\t30\n27436895\t44\n24325881\t34\n27050114\t23\n27836576\t17\n28891923\t9\n23650307\t33\n28315054\t15\n25961397\t6\n26132470\t21\n26877035\t41\n19894599\t52\n12821050\t5\n28505474\t10\n27996052\t14\n27427953\t43\n26384835\t51\n28932533\t11\n26713900\t13\n26812375\t40\n27081973\t46\n22909564\t32\n26368400\t26\n26357815\t25\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 4761 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-104339_26190446",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Apr 21, 2019 8:31:06 PM",
      "dateFinished": "Apr 21, 2019 8:31:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "dateUpdated": "Oct 8, 2016 9:10:58 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475035779253_1670886472",
      "id": "20160928-040939_194085087",
      "dateCreated": "Sep 28, 2016 9:39:39 AM",
      "dateStarted": "Sep 28, 2016 9:39:46 AM",
      "dateFinished": "Sep 28, 2016 9:39:46 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " What are the worst times of day to take a cab from midtown to JFK airport?",
      "text": "%sql\n\n-- A more selective query: filtered on two locations in manhattan\n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) hr, count(*) howManyTrips from nyc_taxi_trip where \nround(pickup_latitude,2) \u003e\u003d round(40.754931,2) and \n round(pickup_longitude,2) \u003c\u003d round(-73.974019,2) and \nround(pickup_latitude,2) \u003c\u003d round(40.757321,2) and  \nround(pickup_longitude,2) \u003e\u003d round(-73.995194,2) and \nround(dropoff_latitude,2) \u003e\u003d round(40.632471,2) and \nround(dropoff_longitude,2) \u003c\u003d round(-73.765469,2) and \nround(dropoff_latitude,2) \u003c\u003d round(40.660735,2) and \n round(dropoff_longitude,2) \u003e\u003d round(-73.799458,2) \ngroup by  hour(pickup_datetime) order by hr;\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:02:11 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "HR",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "HR",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "HR",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "TRIPTIME",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TRIPTIME\tHR\tHOWMANYTRIPS\n30.248017799352752\t0\t412\n27.6900462962963\t1\t432\n27.00043498168498\t2\t728\n25.705693828844183\t3\t2933\n24.87108586883029\t4\t12325\n25.380651599735877\t5\t22212\n29.36705309916294\t6\t25964\n36.49075993504011\t7\t20936\n37.27744937672738\t8\t17729\n36.48547738400559\t9\t17156\n35.41730394760134\t10\t18830\n35.95173884781019\t11\t24614\n38.41489198503761\t12\t31724\n42.120699884316636\t13\t40340\n48.45349669404666\t14\t50767\n55.26458856014072\t15\t46236\n56.38498426696477\t16\t32204\n52.59022478439452\t17\t25239\n44.99836367523475\t18\t20269\n38.241238039013105\t19\t13551\n34.18698803914461\t20\t8277\n32.32445126268586\t21\t4237\n31.455373032169746\t22\t1948\n30.900381526104425\t23\t830\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 110808 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523599_-42160534",
      "id": "20160913-105109_332811400",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 5:49:55 AM",
      "dateFinished": "May 12, 2017 5:51:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " What are the worst times of day to take a cab from midtown to JFK airport?   (Use Synopsis)",
      "text": "%sql show-instant-results-first\n\n-- Note the directive \u0027show-instant-results-first\u0027 so we want an immediate, approximate answer followed by the 100% accurate answer. \n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) hr, count(*) howManyTrips from nyc_taxi_trip where \nround(pickup_latitude,2) \u003e\u003d round(40.754931,2) and \nround(pickup_longitude,2) \u003c\u003d round(-73.974019,2) and \nround(pickup_latitude,2) \u003c\u003d round(40.757321,2) and  \nround(pickup_longitude,2) \u003e\u003d round(-73.995194,2) and \nround(dropoff_latitude,2) \u003e\u003d round(40.632471,2) and \nround(dropoff_longitude,2) \u003c\u003d round(-73.765469,2) and \nround(dropoff_latitude,2) \u003c\u003d round(40.660735,2) and \n round(dropoff_longitude,2) \u003e\u003d round(-73.799458,2) \ngroup by  hour(pickup_datetime) order by hr ;\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:02:24 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "HR",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "HR",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "HR",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "TRIPTIME",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TRIPTIME\tHR\tHOWMANYTRIPS\n30.248017799352752\t0\t412\n27.6900462962963\t1\t432\n27.00043498168498\t2\t728\n25.705693828844183\t3\t2933\n24.87108586883029\t4\t12325\n25.380651599735877\t5\t22212\n29.36705309916294\t6\t25964\n36.49075993504011\t7\t20936\n37.27744937672738\t8\t17729\n36.48547738400559\t9\t17156\n35.41730394760134\t10\t18830\n35.95173884781019\t11\t24614\n38.41489198503761\t12\t31724\n42.120699884316636\t13\t40340\n48.45349669404666\t14\t50767\n55.26458856014072\t15\t46236\n56.38498426696477\t16\t32204\n52.59022478439452\t17\t25239\n44.99836367523475\t18\t20269\n38.241238039013105\t19\t13551\n34.18698803914461\t20\t8277\n32.32445126268586\t21\t4237\n31.455373032169746\t22\t1948\n30.900381526104425\t23\t830\n\u003c!--TABLE_COMMENT--\u003e\n\u003cfont color\u003dred\u003eTime required to execute query on sample table : 3995 millis.\u003c/font\u003e\u003cbr\u003e\n\u003cfont color\u003dred\u003eTime required to execute query on base table : 100421 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523599_-42160534",
      "id": "20160913-105108_1325523020",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 5:52:38 AM",
      "dateFinished": "May 12, 2017 5:54:18 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "dateUpdated": "Oct 14, 2016 3:57:44 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475035844284_-121415111",
      "id": "20160928-041044_1557092045",
      "dateCreated": "Sep 28, 2016 9:40:44 AM",
      "dateStarted": "Sep 28, 2016 9:40:53 AM",
      "dateFinished": "Sep 28, 2016 9:40:53 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How does ridership change over months?",
      "text": "%sql\n-- Query will take more than 20 seconds. And, this is just one year\u0027s data.\n\nselect count(*) numOfRides,CASE \nWHEN month(pickup_datetime) \u003d 1 THEN \u0027Jan\u0027 \nWHEN month(pickup_datetime) \u003d 2 THEN \u0027Feb\u0027 \nWHEN month(pickup_datetime) \u003d 3 THEN \u0027Mar\u0027 \nWHEN month(pickup_datetime) \u003d 4 THEN \u0027Apr\u0027 \nWHEN month(pickup_datetime) \u003d 5 THEN \u0027May\u0027 \nWHEN month(pickup_datetime) \u003d 6 THEN \u0027Jun\u0027\nWHEN month(pickup_datetime) \u003d 7 THEN \u0027Jul\u0027 \nWHEN month(pickup_datetime) \u003d 8 THEN \u0027Aug\u0027 \nWHEN month(pickup_datetime) \u003d 9 THEN \u0027Sep\u0027 \nWHEN month(pickup_datetime) \u003d 10 THEN \u0027Oct\u0027 \nWHEN month(pickup_datetime) \u003d 11 THEN \u0027Nov\u0027 \nWHEN month(pickup_datetime) \u003d 12 THEN \u0027Dec\u0027\nEND AS mnt from nyc_taxi_trip group by month(pickup_datetime) \norder by month(pickup_datetime);\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:02:48 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "MNT",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          },
          "lineWithFocus": false,
          "forceY": false
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "MNT",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "NUMOFRIDES",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUMOFRIDES\tMNT\n13907003\tFeb\n15654107\tMar\n14976700\tApr\n15120732\tMay\n14290257\tJun\n13737879\tJul\n12425301\tAug\n14016154\tSep\n14909765\tOct\n14298285\tNov\n13879436\tDec\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 33364 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-102929_1633634550",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 5:54:34 AM",
      "dateFinished": "May 12, 2017 5:55:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How does ridership change over months? (Use Synopsis) ",
      "text": "%sql\n-- Run the same query but we can tolerate a 10% error (\u0027with error 0.1\u0027)\n-- \u0027behavior \u0027do_nothing\u0027 instructs snappydata to take no action even when error constraint is not met. See docs for details. \nset spark.sql.shuffle.partitions\u003d7;\nselect count(*) numOfRides,relative_error(numOFRides), CASE \nWHEN month(pickup_datetime) \u003d 1 THEN concat(\u0027Jan\u0027, \u0027a\u0027)\nWHEN month(pickup_datetime) \u003d 2 THEN \u0027Feb\u0027 \nWHEN month(pickup_datetime) \u003d 3 THEN \u0027Mar\u0027 \nWHEN month(pickup_datetime) \u003d 4 THEN \u0027Apr\u0027 \nWHEN month(pickup_datetime) \u003d 5 THEN \u0027May\u0027 \nWHEN month(pickup_datetime) \u003d 6 THEN \u0027Jun\u0027\nWHEN month(pickup_datetime) \u003d 7 THEN \u0027Jul\u0027 \nWHEN month(pickup_datetime) \u003d 8 THEN \u0027Aug\u0027 \nWHEN month(pickup_datetime) \u003d 9 THEN \u0027Sep\u0027 \nWHEN month(pickup_datetime) \u003d 10 THEN \u0027Oct\u0027 \nWHEN month(pickup_datetime) \u003d 11 THEN \u0027Nov\u0027 \nWHEN month(pickup_datetime) \u003d 12 THEN \u0027Dec\u0027\nEND AS mnt from nyc_taxi_trip group by month(pickup_datetime) \norder by month(pickup_datetime) with error 0.1 behavior \u0027do_nothing\u0027 ;\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:03:06 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "MNT",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "NUMOFRIDES",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "lineChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "MNT",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "NUMOFRIDES",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUMOFRIDES\tRelative_Error(NUMOFRIDES)\tMNT\n13952931\t0.005662872157195868\tFeb\n15655058\t0.005340426280134245\tMar\n14943013\t0.005427044204322413\tApr\n15108821\t0.005425377822190278\tMay\n14277752\t0.005579886263835403\tJun\n13719803\t0.0056859510991556315\tJul\n12482482\t0.005907251409246955\tAug\n14015221\t0.005583132667777893\tSep\n14900068\t0.005469082744543598\tOct\n14317178\t0.005616997611955307\tNov\n13843286\t0.005621852083570864\tDec\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 263 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523598_-41775785",
      "id": "20160913-102900_344385570",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 6:14:46 AM",
      "dateFinished": "May 12, 2017 6:14:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Sep 27, 2016 3:38:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475014123173_434658123",
      "id": "20160927-220843_304311260",
      "dateCreated": "Sep 27, 2016 3:38:43 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How long does it take to ride from Midtown to Downtown?",
      "text": "%sql\n\n-- Another selective query\n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) as hour from nyc_taxi_trip where pickup_latitude \u003c 40.767588 and pickup_latitude \u003e 40.749775 and pickup_longitude \u003e -74.001632 and  pickup_longitude \u003c -73.974595 and dropoff_latitude \u003e 40.716800     and  dropoff_latitude \u003c  40.717776 and dropoff_longitude \u003e  -74.017682 and dropoff_longitude \u003c -74.000945 group by  hour(pickup_datetime) order by hour(pickup_datetime);\n\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:03:15 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "HOUR",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TRIPTIME\tHOUR\n15.085161987041037\t0\n13.540998796630568\t1\n12.540488936473945\t2\n12.381754705525196\t3\n11.881226053639848\t4\n10.677551020408163\t5\n11.471524064171122\t6\n14.169968919968923\t7\n17.118609498287924\t8\n19.012533602150537\t9\n19.04250080205325\t10\n19.83288145805091\t11\n19.88977689710847\t12\n19.470002803476312\t13\n19.716883774786513\t14\n20.193514328808444\t15\n19.8675506350841\t16\n21.218925233644857\t17\n21.091895005348473\t18\n19.387736174320782\t19\n17.68865073093639\t20\n16.197005719798778\t21\n16.13448225069966\t22\n15.769528374975792\t23\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 67755 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523599_-42160534",
      "id": "20160913-104647_1842940668",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 9:03:15 AM",
      "dateFinished": "May 12, 2017 9:04:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "How long does it take to ride from Midtown to Downtown?  (Use Synopsis)",
      "text": "%sql \n\n-- Absolute_error function provides a +/- error estimate \n-- \u0027with error\u0027 with no constraint indicates we can tolerate any error rate.\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) as hour, absolute_error(tripTime) from nyc_taxi_trip where pickup_latitude \u003c 40.767588 and pickup_latitude \u003e 40.749775 and pickup_longitude \u003e -74.001632 and  pickup_longitude \u003c -73.974595 and dropoff_latitude \u003e 40.716800     and  dropoff_latitude \u003c  40.717776 and dropoff_longitude \u003e  -74.017682 and dropoff_longitude \u003c -74.000945 group by hour(pickup_datetime) order by hour(pickup_datetime) with error;\n\n",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:04:25 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "HOUR",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            },
            {
              "name": "Absolute_Error(TRIPTIME)",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TRIPTIME",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TRIPTIME\tHOUR\tAbsolute_Error(TRIPTIME)\n16.8555038463938\t0\t1.5377789904110504\n13.804092473013839\t1\t1.0664798509450897\n11.898969253747085\t2\t0.4903174989890413\n12.173309930345342\t3\t0.9947409695204312\n12.526992571772738\t4\t0.9628529706139268\n11.210863758335933\t5\t0.8426775916503582\n10.896953231608983\t6\t0.5620244274420498\n14.179892406886452\t7\t1.5521371045227452\n16.769939064460587\t8\t1.099290629462442\n19.496981288219086\t9\t3.2420212950067295\n20.236820120704373\t10\t1.8678669415099698\n21.714149119447026\t11\t3.126362121573992\n21.456306949263443\t12\t2.380765742517795\n19.04573355558081\t13\t1.6109091292166742\n18.95336904938193\t14\t1.5742298172323057\n22.010248366609133\t15\t2.97456516579952\n20.20473381955869\t16\t1.2290547032809869\n23.83602387801809\t17\t2.291186659288231\n19.759616571944452\t18\t1.943730089215368\n19.5275410173759\t19\t1.844940195972688\n16.767727754463554\t20\t0.7612274104615206\n14.770488340505329\t21\t0.6026864861055863\n16.054226026678926\t22\t0.8544711093698405\n15.533389610856801\t23\t0.8940780979494383\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 3234 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523599_-42160534",
      "id": "20160913-104646_1938915458",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "May 12, 2017 9:04:26 AM",
      "dateFinished": "May 12, 2017 9:04:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Queries on Fare table",
      "dateUpdated": "Oct 14, 2016 3:58:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475014167701_528044836",
      "id": "20160927-220927_974574372",
      "dateCreated": "Sep 27, 2016 3:39:27 AM",
      "dateStarted": "Sep 27, 2016 4:05:13 AM",
      "dateFinished": "Sep 27, 2016 4:05:13 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "What are the most common tip percentages in NYC for rides?",
      "text": "%sql\n\n\n-- Try switching payment types from CRD to CSH for credit card vs Cash tips\n-- Most pay no tip when using cash. Hmm!\nSELECT (ROUND( (tip_amount / fare_amount) * 100 )) tip_pct, avg(fare_amount), count(*) trips\nFROM taxi_trip_fare WHERE payment_type \u003d ${paymentType \u003d\u0027CRD\u0027} and fare_amount \u003e 0.00 and tip_amount \u003c 50\nGROUP BY (ROUND( tip_amount / fare_amount * 100 ))\nORDER BY (ROUND( tip_amount / fare_amount * 100 )) limit 30;\n",
      "user": "anonymous",
      "dateUpdated": "Aug 22, 2017 9:50:51 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "TIP_PCT",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPS",
              "index": 2.0,
              "aggr": "sum"
            },
            {
              "name": "avg(FARE_AMOUNT)",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TIP_PCT",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "avg(FARE_AMOUNT)",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "pieChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "TIP_PCT",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "avg(FARE_AMOUNT)",
                  "index": 1.0,
                  "aggr": "sum"
                },
                {
                  "name": "TRIPS",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {
          "paymentType": "\u0027CRD\u0027"
        },
        "forms": {
          "paymentType": {
            "name": "paymentType",
            "defaultValue": "\u0027CRD\u0027",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TIP_PCT\tavg(FARE_AMOUNT)\tTRIPS\n0.0\t17.39065524839325\t2969042\n1.0\t14.653081153141146\t72012\n2.0\t20.772614025192706\t53190\n3.0\t25.617124897157954\t69281\n4.0\t25.70779788500825\t183074\n5.0\t20.67539952749994\t362328\n6.0\t18.604799601666944\t673808\n7.0\t16.366277235243054\t921600\n8.0\t15.533000382463877\t1286396\n9.0\t15.20030907841818\t1397380\n10.0\t16.638903067860007\t2118317\n11.0\t13.270391225941406\t2596837\n12.0\t14.530937682530938\t1866122\n13.0\t12.119563171713699\t3367227\n14.0\t12.501209590414506\t2438685\n15.0\t13.181315907822976\t2459268\n16.0\t16.137789724650556\t1090941\n17.0\t11.008520390769977\t2408271\n18.0\t9.93695325114996\t1948326\n19.0\t16.99167838016356\t1052205\n20.0\t15.236613077490453\t13568536\n21.0\t13.196096744517092\t15291802\n22.0\t10.661907009419751\t9186866\n23.0\t10.364547755828148\t4327231\n24.0\t11.457056091894918\t2512609\n25.0\t13.49774911223061\t4517502\n26.0\t14.798435502232298\t3190436\n27.0\t9.242374698782108\t2396106\n28.0\t12.693267131119484\t1253231\n29.0\t10.074595033302613\t1127389\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 20815 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523600_-31772314",
      "id": "20160913-110707_798631377",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Aug 22, 2017 9:50:51 AM",
      "dateFinished": "Aug 22, 2017 9:51:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "What are the most common tip percentages in NYC for rides?  (Use Synopsis)",
      "text": "%sql\n\n-- Payment type : \u0027CSH\u0027(cash), \u0027CRD\u0027(credit card), \u0027DIS\u0027...\nSELECT (ROUND( (tip_amount / fare_amount) * 100 )) tip_pct, avg(fare_amount), count(*) trips\nFROM taxi_trip_fare WHERE \npayment_type \u003d ${paymentType\u003d\u0027CRD\u0027}\n and fare_amount \u003e 0.00 and tip_amount \u003c 50\nGROUP BY (ROUND( tip_amount / fare_amount * 100 ))\nORDER BY (ROUND( tip_amount / fare_amount * 100 )) limit 30 with error ;\n",
      "user": "anonymous",
      "dateUpdated": "Aug 22, 2017 9:51:17 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "TIP_PCT",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "TRIPS",
              "index": 2.0,
              "aggr": "sum"
            },
            {
              "name": "avg(FARE_AMOUNT)",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "TIP_PCT",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/text",
        "colWidth": 6.0,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "pieChart": {}
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "TIP_PCT",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "avg(FARE_AMOUNT)",
                  "index": 1.0,
                  "aggr": "sum"
                },
                {
                  "name": "TRIPS",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {
          "paymentType": "\u0027CRD\u0027",
          "payment_type": "CRD",
          "fields": [],
          "paymentType in \u0027CRD\u0027": ""
        },
        "forms": {
          "paymentType": {
            "name": "paymentType",
            "defaultValue": "\u0027CRD\u0027",
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TIP_PCT\tavg(FARE_AMOUNT)\tTRIPS\n0.0\t17.36191112870197\t2983642\n1.0\t14.365943179326853\t70426\n2.0\t21.42940014752345\t52384\n3.0\t24.28556472738377\t68843\n4.0\t25.939581451130373\t188192\n5.0\t21.02140294277247\t361986\n6.0\t18.55084326216976\t677279\n7.0\t16.366149787378234\t936352\n8.0\t15.551810683307231\t1291439\n9.0\t15.166301380970056\t1399099\n10.0\t16.552626779709897\t2130206\n11.0\t13.322271996029247\t2596846\n12.0\t14.665393976305495\t1872708\n13.0\t12.09592648197975\t3332996\n14.0\t12.448756577746465\t2447988\n15.0\t13.203394948087936\t2435458\n16.0\t16.15811045426882\t1087066\n17.0\t10.990437481004754\t2395554\n18.0\t10.036028814549814\t1961123\n19.0\t16.84858227968415\t1042426\n20.0\t15.278944112501488\t13572239\n21.0\t13.181348145699324\t15308648\n22.0\t10.71623832257219\t9180026\n23.0\t10.441716919814546\t4329803\n24.0\t11.387660068339237\t2518022\n25.0\t13.429247547699836\t4521161\n26.0\t14.763576277015448\t3196451\n27.0\t9.299482866271681\t2379527\n28.0\t12.730210107137731\t1260351\n29.0\t10.176279019080377\t1123354\n\u003c!--TABLE_COMMENT--\u003e\n\u003cbr\u003e\u003cfont color\u003dred\u003eTime required to execute query : 852 millis.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1474764523600_-31772314",
      "id": "20160913-110616_1099195513",
      "dateCreated": "Sep 25, 2016 6:18:43 AM",
      "dateStarted": "Aug 22, 2017 9:51:17 AM",
      "dateFinished": "Aug 22, 2017 9:51:18 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Locations with the most taxis in NYC",
      "text": "%snappydata\nval d\u003dsnc.sql(\"select round(dropoff_latitude,4),round(dropoff_longitude,4),count(*) cnt from nyc_taxi_trip  where (dropoff_latitude between 40 and 41) and (dropoff_longitude between -74 and -73)   group by round(dropoff_latitude,4),round(dropoff_longitude,4) order by cnt desc limit 200 with error\")\n\n//val d\u003dsnc.sql(\"select round(dropoff_latitude,5),round(dropoff_longitude,5),count(*) cnt from nyc_taxi_trip  where (dropoff_latitude between 40 and 41) and (dropoff_longitude between -74 and -73)   group by round(dropoff_latitude,5),round(dropoff_longitude,5) order by cnt desc limit 50 with error\")\nval gson \u003d new com.google.gson.Gson()\nval raw\u003dd.rdd.map{r\u003d\u003e\nMap(\n\"HOWMANYTRIPS\" -\u003e r(2),\n\"LAT\" -\u003e r(0).toString.toDouble,\n\"LON\" -\u003e r(1).toString.toDouble\n)}.collect.map(s\u003d\u003escala.collection.JavaConversions.mapAsJavaMap(s))\nval dataJson \u003d gson.toJson(raw)",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:56:19 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/text",
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nd: org.apache.spark.sql.DataFrame \u003d [round(DROPOFF_LATITUDE, 4): double, round(DROPOFF_LONGITUDE, 4): double ... 1 more field]\ngson: com.google.gson.Gson \u003d {serializeNulls:falsefactories:[Factory[typeHierarchy\u003dcom.google.gson.JsonElement,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$25@5076d662], com.google.gson.internal.bind.ObjectTypeAdapter$1@e1dacef, com.google.gson.internal.Excluder@68708bf0, Factory[type\u003djava.lang.String,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$13@425face2], Factory[type\u003djava.lang.Integer+int,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$7@24fca70d], Factory[type\u003djava.lang.Boolean+boolean,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$3@47650da9], Factory[type\u003djava.lang.Byte+byte,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$5@2ba631be], Factory[type\u003djava.lang.Short+short,adapter\u003dcom.google.gson.internal.bind.TypeAdapters$6@1421b094], Factory[type\u003djava.lang.Lo...raw: Array[java.util.Map[String,Any]] \u003d Array({HOWMANYTRIPS\u003d39710, LAT\u003d40.7501, LON\u003d-73.9949}, {HOWMANYTRIPS\u003d36802, LAT\u003d40.7504, LON\u003d-73.9947}, {HOWMANYTRIPS\u003d35520, LAT\u003d40.7682, LON\u003d-73.8615}, {HOWMANYTRIPS\u003d34766, LAT\u003d40.7502, LON\u003d-73.9949}, {HOWMANYTRIPS\u003d31113, LAT\u003d40.7502, LON\u003d-73.9913}, {HOWMANYTRIPS\u003d30596, LAT\u003d40.7683, LON\u003d-73.8616}, {HOWMANYTRIPS\u003d30078, LAT\u003d40.7503, LON\u003d-73.9912}, {HOWMANYTRIPS\u003d29380, LAT\u003d40.75, LON\u003d-73.995}, {HOWMANYTRIPS\u003d28698, LAT\u003d40.7683, LON\u003d-73.8617}, {HOWMANYTRIPS\u003d28484, LAT\u003d40.7684, LON\u003d-73.8618}, {HOWMANYTRIPS\u003d26846, LAT\u003d40.7501, LON\u003d-73.9913}, {HOWMANYTRIPS\u003d26642, LAT\u003d40.7709, LON\u003d-73.8656}, {HOWMANYTRIPS\u003d26431, LAT\u003d40.7503, LON\u003d-73.9948}, {HOWMANYTRIPS\u003d25876, LAT\u003d40.7741, LON\u003d-73.8709}, {HOWMANYTRIPS\u003d25324, LAT\u003d40.7501, LON\u003d-73.995}, {HOWMANYTRIPS\u003d24944,...dataJson: String \u003d [{\"HOWMANYTRIPS\":39710,\"LAT\":40.7501,\"LON\":-73.9949},{\"HOWMANYTRIPS\":36802,\"LAT\":40.7504,\"LON\":-73.9947},{\"HOWMANYTRIPS\":35520,\"LAT\":40.7682,\"LON\":-73.8615},{\"HOWMANYTRIPS\":34766,\"LAT\":40.7502,\"LON\":-73.9949},{\"HOWMANYTRIPS\":31113,\"LAT\":40.7502,\"LON\":-73.9913},{\"HOWMANYTRIPS\":30596,\"LAT\":40.7683,\"LON\":-73.8616},{\"HOWMANYTRIPS\":30078,\"LAT\":40.7503,\"LON\":-73.9912},{\"HOWMANYTRIPS\":29380,\"LAT\":40.75,\"LON\":-73.995},{\"HOWMANYTRIPS\":28698,\"LAT\":40.7683,\"LON\":-73.8617},{\"HOWMANYTRIPS\":28484,\"LAT\":40.7684,\"LON\":-73.8618},{\"HOWMANYTRIPS\":26846,\"LAT\":40.7501,\"LON\":-73.9913},{\"HOWMANYTRIPS\":26642,\"LAT\":40.7709,\"LON\":-73.8656},{\"HOWMANYTRIPS\":26431,\"LAT\":40.7503,\"LON\":-73.9948},{\"HOWMANYTRIPS\":25876,\"LAT\":40.7741,\"LON\":-73.8709},{\"HOWMANYTRIPS\":25324,\"LAT\":40.7501,\"LON\":-73.995},{..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1475752757399_-1870018474",
      "id": "20161006-111917_1418725249",
      "dateCreated": "Oct 6, 2016 4:49:17 AM",
      "dateStarted": "May 12, 2017 9:55:52 AM",
      "dateFinished": "May 12, 2017 9:55:52 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%snappydata\nprintln(s\"\"\"%html\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"utf-8\"\u003e\n    \u003ctitle\u003eHeatmaps\u003c/title\u003e\n    \u003cstyle\u003e\n      #mapDiv {\n        height: 700px;\n        width: 1000px;\n      }\n      #floating-panel {\n        position: absolute;\n        left: 25%;\n        z-index: 5;\n        background-color: #fff;\n        padding: 3px;\n        border: 1px solid #999;\n        text-align: center;\n        font-family: \u0027Roboto\u0027,\u0027sans-serif\u0027;\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv id\u003d\"floating-panel\"\u003e\n      \u003cbutton onclick\u003d\"toggleHeatmap()\"\u003eToggle Heatmap\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeGradient()\"\u003eChange gradient\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeRadius()\"\u003eChange radius\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeOpacity()\"\u003eChange opacity\u003c/button\u003e\n    \u003c/div\u003e\n    \u003cdiv id\u003d\"mapDiv\"\u003e\u003c/div\u003e\n    \u003cscript\u003e\n\n      // This example requires the Visualization library. Include the libraries\u003dvisualization\n      // parameter when you first load the API. For example:\n      // \u003cscript src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dYOUR_API_KEY\u0026libraries\u003dvisualization\"\u003e\n\n      var map, heatmap;\n      \n      function buildMapData() {\n        var geoDataPoints\u003d[];\n        \n        ${dataJson}.forEach(s \u003d\u003e { \n           geoDataPoints.push(new google.maps.LatLng(s.LAT, s.LON));\n           \n        });\n        return geoDataPoints;\n      }\n\n      function initMap() {\n      \n      var geoData \u003d buildMapData();\n      \n        map \u003d new google.maps.Map(document.getElementById(\u0027mapDiv\u0027), {\n          zoom: 11,\n          center: {lat: 40.74, lng: -73.98},\n          mapTypeId: \u0027roadmap\u0027\n        });\n\n        heatmap \u003d new google.maps.visualization.HeatmapLayer({\n          data: geoData,\n          map: map\n        });\n      }\n\n      function toggleHeatmap() {\n        heatmap.setMap(heatmap.getMap() ? null : map);\n      }\n\n      function changeGradient() {\n        var gradient \u003d [\n          \u0027rgba(0, 255, 255, 0)\u0027,\n          \u0027rgba(0, 255, 255, 1)\u0027,\n          \u0027rgba(0, 191, 255, 1)\u0027,\n          \u0027rgba(0, 127, 255, 1)\u0027,\n          \u0027rgba(0, 63, 255, 1)\u0027,\n          \u0027rgba(0, 0, 255, 1)\u0027,\n          \u0027rgba(0, 0, 223, 1)\u0027,\n          \u0027rgba(0, 0, 191, 1)\u0027,\n          \u0027rgba(0, 0, 159, 1)\u0027,\n          \u0027rgba(0, 0, 127, 1)\u0027,\n          \u0027rgba(63, 0, 91, 1)\u0027,\n          \u0027rgba(127, 0, 63, 1)\u0027,\n          \u0027rgba(191, 0, 31, 1)\u0027,\n          \u0027rgba(255, 0, 0, 1)\u0027\n        ]\n        heatmap.set(\u0027gradient\u0027, heatmap.get(\u0027gradient\u0027) ? null : gradient);\n      }\n\n      function changeRadius() {\n        heatmap.set(\u0027radius\u0027, heatmap.get(\u0027radius\u0027) ? null : 20);\n      }\n\n      function changeOpacity() {\n        heatmap.set(\u0027opacity\u0027, heatmap.get(\u0027opacity\u0027) ? null : 0.2);\n      }\n\n      \n    \u003c/script\u003e\n    \u003cscript async defer src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dAIzaSyDaMDbH-BKjboCl3ohjqsayMa-w335GmpA\u0026libraries\u003dvisualization\u0026callback\u003dinitMap\"\u003e\u003c/script\u003e\n  \u003c/body\u003e\n    \n\n\"\"\")",
      "user": "anonymous",
      "dateUpdated": "May 12, 2017 9:55:56 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "  \u003chead\u003e\n    \u003cmeta charset\u003d\"utf-8\"\u003e\n    \u003ctitle\u003eHeatmaps\u003c/title\u003e\n    \u003cstyle\u003e\n      #mapDiv {\n        height: 700px;\n        width: 1000px;\n      }\n      #floating-panel {\n        position: absolute;\n        left: 25%;\n        z-index: 5;\n        background-color: #fff;\n        padding: 3px;\n        border: 1px solid #999;\n        text-align: center;\n        font-family: \u0027Roboto\u0027,\u0027sans-serif\u0027;\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv id\u003d\"floating-panel\"\u003e\n      \u003cbutton onclick\u003d\"toggleHeatmap()\"\u003eToggle Heatmap\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeGradient()\"\u003eChange gradient\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeRadius()\"\u003eChange radius\u003c/button\u003e\n      \u003cbutton onclick\u003d\"changeOpacity()\"\u003eChange opacity\u003c/button\u003e\n    \u003c/div\u003e\n    \u003cdiv id\u003d\"mapDiv\"\u003e\u003c/div\u003e\n    \u003cscript\u003e\n\n      // This example requires the Visualization library. Include the libraries\u003dvisualization\n      // parameter when you first load the API. For example:\n      // \u003cscript src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dYOUR_API_KEY\u0026libraries\u003dvisualization\"\u003e\n\n      var map, heatmap;\n      \n      function buildMapData() {\n        var geoDataPoints\u003d[];\n        \n        [{\"HOWMANYTRIPS\":39710,\"LAT\":40.7501,\"LON\":-73.9949},{\"HOWMANYTRIPS\":36802,\"LAT\":40.7504,\"LON\":-73.9947},{\"HOWMANYTRIPS\":35520,\"LAT\":40.7682,\"LON\":-73.8615},{\"HOWMANYTRIPS\":34766,\"LAT\":40.7502,\"LON\":-73.9949},{\"HOWMANYTRIPS\":31113,\"LAT\":40.7502,\"LON\":-73.9913},{\"HOWMANYTRIPS\":30596,\"LAT\":40.7683,\"LON\":-73.8616},{\"HOWMANYTRIPS\":30078,\"LAT\":40.7503,\"LON\":-73.9912},{\"HOWMANYTRIPS\":29380,\"LAT\":40.75,\"LON\":-73.995},{\"HOWMANYTRIPS\":28698,\"LAT\":40.7683,\"LON\":-73.8617},{\"HOWMANYTRIPS\":28484,\"LAT\":40.7684,\"LON\":-73.8618},{\"HOWMANYTRIPS\":26846,\"LAT\":40.7501,\"LON\":-73.9913},{\"HOWMANYTRIPS\":26642,\"LAT\":40.7709,\"LON\":-73.8656},{\"HOWMANYTRIPS\":26431,\"LAT\":40.7503,\"LON\":-73.9948},{\"HOWMANYTRIPS\":25876,\"LAT\":40.7741,\"LON\":-73.8709},{\"HOWMANYTRIPS\":25324,\"LAT\":40.7501,\"LON\":-73.995},{\"HOWMANYTRIPS\":24944,\"LAT\":40.7504,\"LON\":-73.9912},{\"HOWMANYTRIPS\":24862,\"LAT\":40.7681,\"LON\":-73.8614},{\"HOWMANYTRIPS\":24804,\"LAT\":40.7503,\"LON\":-73.9913},{\"HOWMANYTRIPS\":23509,\"LAT\":40.7501,\"LON\":-73.9914},{\"HOWMANYTRIPS\":23273,\"LAT\":40.7505,\"LON\":-73.9946},{\"HOWMANYTRIPS\":22069,\"LAT\":40.7504,\"LON\":-73.9911},{\"HOWMANYTRIPS\":20885,\"LAT\":40.7705,\"LON\":-73.865},{\"HOWMANYTRIPS\":20823,\"LAT\":40.7499,\"LON\":-73.9951},{\"HOWMANYTRIPS\":20760,\"LAT\":40.7502,\"LON\":-73.9912},{\"HOWMANYTRIPS\":20221,\"LAT\":40.7502,\"LON\":-73.9914},{\"HOWMANYTRIPS\":20087,\"LAT\":40.774,\"LON\":-73.8708},{\"HOWMANYTRIPS\":20059,\"LAT\":40.75,\"LON\":-73.9914},{\"HOWMANYTRIPS\":19632,\"LAT\":40.7708,\"LON\":-73.8655},{\"HOWMANYTRIPS\":19254,\"LAT\":40.7684,\"LON\":-73.8617},{\"HOWMANYTRIPS\":19052,\"LAT\":40.7685,\"LON\":-73.8619},{\"HOWMANYTRIPS\":19027,\"LAT\":40.7682,\"LON\":-73.8616},{\"HOWMANYTRIPS\":18425,\"LAT\":40.7503,\"LON\":-73.9947},{\"HOWMANYTRIPS\":18064,\"LAT\":40.7502,\"LON\":-73.9948},{\"HOWMANYTRIPS\":18027,\"LAT\":40.7742,\"LON\":-73.8711},{\"HOWMANYTRIPS\":17985,\"LAT\":40.7505,\"LON\":-73.9947},{\"HOWMANYTRIPS\":17910,\"LAT\":40.771,\"LON\":-73.8657},{\"HOWMANYTRIPS\":17865,\"LAT\":40.7505,\"LON\":-73.9911},{\"HOWMANYTRIPS\":17836,\"LAT\":40.7501,\"LON\":-73.9912},{\"HOWMANYTRIPS\":17236,\"LAT\":40.75,\"LON\":-73.9915},{\"HOWMANYTRIPS\":17212,\"LAT\":40.7704,\"LON\":-73.8649},{\"HOWMANYTRIPS\":17187,\"LAT\":40.7742,\"LON\":-73.871},{\"HOWMANYTRIPS\":17021,\"LAT\":40.7505,\"LON\":-73.991},{\"HOWMANYTRIPS\":16792,\"LAT\":40.7743,\"LON\":-73.8727},{\"HOWMANYTRIPS\":16397,\"LAT\":40.7745,\"LON\":-73.8726},{\"HOWMANYTRIPS\":16215,\"LAT\":40.7498,\"LON\":-73.9952},{\"HOWMANYTRIPS\":16012,\"LAT\":40.768,\"LON\":-73.8613},{\"HOWMANYTRIPS\":15846,\"LAT\":40.7504,\"LON\":-73.9913},{\"HOWMANYTRIPS\":15785,\"LAT\":40.7739,\"LON\":-73.8707},{\"HOWMANYTRIPS\":15667,\"LAT\":40.7504,\"LON\":-73.9948},{\"HOWMANYTRIPS\":15658,\"LAT\":40.7492,\"LON\":-73.9922},{\"HOWMANYTRIPS\":15526,\"LAT\":40.7745,\"LON\":-73.8723},{\"HOWMANYTRIPS\":15482,\"LAT\":40.7505,\"LON\":-73.9912},{\"HOWMANYTRIPS\":15445,\"LAT\":40.7745,\"LON\":-73.8725},{\"HOWMANYTRIPS\":15306,\"LAT\":40.7493,\"LON\":-73.9922},{\"HOWMANYTRIPS\":15262,\"LAT\":40.774,\"LON\":-73.8707},{\"HOWMANYTRIPS\":15246,\"LAT\":40.7741,\"LON\":-73.871},{\"HOWMANYTRIPS\":15134,\"LAT\":40.7744,\"LON\":-73.8731},{\"HOWMANYTRIPS\":15071,\"LAT\":40.7499,\"LON\":-73.9915},{\"HOWMANYTRIPS\":15059,\"LAT\":40.7503,\"LON\":-73.9911},{\"HOWMANYTRIPS\":15058,\"LAT\":40.75,\"LON\":-73.9913},{\"HOWMANYTRIPS\":15010,\"LAT\":40.7707,\"LON\":-73.8654},{\"HOWMANYTRIPS\":14939,\"LAT\":40.7738,\"LON\":-73.8705},{\"HOWMANYTRIPS\":14780,\"LAT\":40.7745,\"LON\":-73.8724},{\"HOWMANYTRIPS\":14723,\"LAT\":40.7706,\"LON\":-73.8652},{\"HOWMANYTRIPS\":14621,\"LAT\":40.7492,\"LON\":-73.9921},{\"HOWMANYTRIPS\":14588,\"LAT\":40.7738,\"LON\":-73.8706},{\"HOWMANYTRIPS\":14526,\"LAT\":40.7506,\"LON\":-73.991},{\"HOWMANYTRIPS\":14336,\"LAT\":40.7739,\"LON\":-73.8706},{\"HOWMANYTRIPS\":14209,\"LAT\":40.7744,\"LON\":-73.8729},{\"HOWMANYTRIPS\":14162,\"LAT\":40.7743,\"LON\":-73.8728},{\"HOWMANYTRIPS\":14085,\"LAT\":40.7503,\"LON\":-73.9914},{\"HOWMANYTRIPS\":13943,\"LAT\":40.7708,\"LON\":-73.8654},{\"HOWMANYTRIPS\":13935,\"LAT\":40.7744,\"LON\":-73.873},{\"HOWMANYTRIPS\":13898,\"LAT\":40.7493,\"LON\":-73.9923},{\"HOWMANYTRIPS\":13440,\"LAT\":40.7501,\"LON\":-73.9915},{\"HOWMANYTRIPS\":13390,\"LAT\":40.7707,\"LON\":-73.8653},{\"HOWMANYTRIPS\":13333,\"LAT\":40.7743,\"LON\":-73.8726},{\"HOWMANYTRIPS\":13122,\"LAT\":40.7679,\"LON\":-73.8612},{\"HOWMANYTRIPS\":13044,\"LAT\":40.75,\"LON\":-73.9951},{\"HOWMANYTRIPS\":12995,\"LAT\":40.7506,\"LON\":-73.9911},{\"HOWMANYTRIPS\":12895,\"LAT\":40.7493,\"LON\":-73.9921},{\"HOWMANYTRIPS\":12832,\"LAT\":40.7491,\"LON\":-73.9917},{\"HOWMANYTRIPS\":12804,\"LAT\":40.7502,\"LON\":-73.9911},{\"HOWMANYTRIPS\":12673,\"LAT\":40.7732,\"LON\":-73.8855},{\"HOWMANYTRIPS\":12658,\"LAT\":40.7507,\"LON\":-73.9909},{\"HOWMANYTRIPS\":12619,\"LAT\":40.75,\"LON\":-73.9949},{\"HOWMANYTRIPS\":12605,\"LAT\":40.7504,\"LON\":-73.991},{\"HOWMANYTRIPS\":12604,\"LAT\":40.7744,\"LON\":-73.8732},{\"HOWMANYTRIPS\":12537,\"LAT\":40.7492,\"LON\":-73.9923},{\"HOWMANYTRIPS\":12380,\"LAT\":40.7705,\"LON\":-73.8651},{\"HOWMANYTRIPS\":12246,\"LAT\":40.7683,\"LON\":-73.9824},{\"HOWMANYTRIPS\":12184,\"LAT\":40.7703,\"LON\":-73.8648},{\"HOWMANYTRIPS\":12080,\"LAT\":40.7491,\"LON\":-73.9918},{\"HOWMANYTRIPS\":11845,\"LAT\":40.7508,\"LON\":-73.9908},{\"HOWMANYTRIPS\":11828,\"LAT\":40.7741,\"LON\":-73.8708},{\"HOWMANYTRIPS\":11825,\"LAT\":40.6488,\"LON\":-73.7825},{\"HOWMANYTRIPS\":11814,\"LAT\":40.774,\"LON\":-73.8709},{\"HOWMANYTRIPS\":11796,\"LAT\":40.7737,\"LON\":-73.8705},{\"HOWMANYTRIPS\":11700,\"LAT\":40.7744,\"LON\":-73.8727},{\"HOWMANYTRIPS\":11508,\"LAT\":40.7419,\"LON\":-73.9748},{\"HOWMANYTRIPS\":11437,\"LAT\":40.7497,\"LON\":-73.9953},{\"HOWMANYTRIPS\":11424,\"LAT\":40.7506,\"LON\":-73.9946},{\"HOWMANYTRIPS\":11418,\"LAT\":40.6469,\"LON\":-73.79},{\"HOWMANYTRIPS\":11405,\"LAT\":40.7502,\"LON\":-73.9915},{\"HOWMANYTRIPS\":11398,\"LAT\":40.7498,\"LON\":-73.9915},{\"HOWMANYTRIPS\":11349,\"LAT\":40.7498,\"LON\":-73.9951},{\"HOWMANYTRIPS\":11196,\"LAT\":40.749,\"LON\":-73.9917},{\"HOWMANYTRIPS\":11154,\"LAT\":40.6452,\"LON\":-73.7764},{\"HOWMANYTRIPS\":11073,\"LAT\":40.7491,\"LON\":-73.9921},{\"HOWMANYTRIPS\":11014,\"LAT\":40.7709,\"LON\":-73.8655},{\"HOWMANYTRIPS\":10914,\"LAT\":40.7744,\"LON\":-73.8726},{\"HOWMANYTRIPS\":10802,\"LAT\":40.7743,\"LON\":-73.8725},{\"HOWMANYTRIPS\":10785,\"LAT\":40.7703,\"LON\":-73.8647},{\"HOWMANYTRIPS\":10743,\"LAT\":40.7745,\"LON\":-73.8727},{\"HOWMANYTRIPS\":10720,\"LAT\":40.7736,\"LON\":-73.8704},{\"HOWMANYTRIPS\":10703,\"LAT\":40.6453,\"LON\":-73.7764},{\"HOWMANYTRIPS\":10645,\"LAT\":40.7418,\"LON\":-73.9749},{\"HOWMANYTRIPS\":10617,\"LAT\":40.7508,\"LON\":-73.9909},{\"HOWMANYTRIPS\":10575,\"LAT\":40.7743,\"LON\":-73.8724},{\"HOWMANYTRIPS\":10500,\"LAT\":40.7499,\"LON\":-73.995},{\"HOWMANYTRIPS\":10448,\"LAT\":40.764,\"LON\":-73.9541},{\"HOWMANYTRIPS\":10418,\"LAT\":40.7743,\"LON\":-73.8729},{\"HOWMANYTRIPS\":10350,\"LAT\":40.7509,\"LON\":-73.9908},{\"HOWMANYTRIPS\":10328,\"LAT\":40.7744,\"LON\":-73.8728},{\"HOWMANYTRIPS\":10298,\"LAT\":40.7504,\"LON\":-73.9946},{\"HOWMANYTRIPS\":10230,\"LAT\":40.7681,\"LON\":-73.8613},{\"HOWMANYTRIPS\":10184,\"LAT\":40.7742,\"LON\":-73.8712},{\"HOWMANYTRIPS\":10155,\"LAT\":40.7506,\"LON\":-73.9909},{\"HOWMANYTRIPS\":10143,\"LAT\":40.7684,\"LON\":-73.9819},{\"HOWMANYTRIPS\":10099,\"LAT\":40.749,\"LON\":-73.9916},{\"HOWMANYTRIPS\":10096,\"LAT\":40.7731,\"LON\":-73.8854},{\"HOWMANYTRIPS\":10085,\"LAT\":40.771,\"LON\":-73.8658},{\"HOWMANYTRIPS\":10079,\"LAT\":40.75,\"LON\":-73.9916},{\"HOWMANYTRIPS\":10038,\"LAT\":40.7491,\"LON\":-73.9916},{\"HOWMANYTRIPS\":9939,\"LAT\":40.7702,\"LON\":-73.8646},{\"HOWMANYTRIPS\":9873,\"LAT\":40.751,\"LON\":-73.9906},{\"HOWMANYTRIPS\":9867,\"LAT\":40.7745,\"LON\":-73.8722},{\"HOWMANYTRIPS\":9840,\"LAT\":40.7492,\"LON\":-73.992},{\"HOWMANYTRIPS\":9825,\"LAT\":40.7683,\"LON\":-73.9823},{\"HOWMANYTRIPS\":9802,\"LAT\":40.7509,\"LON\":-73.9907},{\"HOWMANYTRIPS\":9788,\"LAT\":40.7745,\"LON\":-73.8729},{\"HOWMANYTRIPS\":9747,\"LAT\":40.7682,\"LON\":-73.8614},{\"HOWMANYTRIPS\":9737,\"LAT\":40.7499,\"LON\":-73.9916},{\"HOWMANYTRIPS\":9726,\"LAT\":40.6456,\"LON\":-73.7763},{\"HOWMANYTRIPS\":9658,\"LAT\":40.7491,\"LON\":-73.992},{\"HOWMANYTRIPS\":9633,\"LAT\":40.647,\"LON\":-73.7898},{\"HOWMANYTRIPS\":9588,\"LAT\":40.7641,\"LON\":-73.9731},{\"HOWMANYTRIPS\":9583,\"LAT\":40.751,\"LON\":-73.9907},{\"HOWMANYTRIPS\":9547,\"LAT\":40.7744,\"LON\":-73.8725},{\"HOWMANYTRIPS\":9525,\"LAT\":40.7511,\"LON\":-73.9906},{\"HOWMANYTRIPS\":9509,\"LAT\":40.7743,\"LON\":-73.8713},{\"HOWMANYTRIPS\":9485,\"LAT\":40.7491,\"LON\":-73.9922},{\"HOWMANYTRIPS\":9478,\"LAT\":40.7491,\"LON\":-73.9919},{\"HOWMANYTRIPS\":9425,\"LAT\":40.7503,\"LON\":-73.991},{\"HOWMANYTRIPS\":9406,\"LAT\":40.7497,\"LON\":-73.9952},{\"HOWMANYTRIPS\":9387,\"LAT\":40.7492,\"LON\":-73.9919},{\"HOWMANYTRIPS\":9327,\"LAT\":40.749,\"LON\":-73.9918},{\"HOWMANYTRIPS\":9320,\"LAT\":40.7504,\"LON\":-73.9914},{\"HOWMANYTRIPS\":9317,\"LAT\":40.7685,\"LON\":-73.8618},{\"HOWMANYTRIPS\":9280,\"LAT\":40.6488,\"LON\":-73.7824},{\"HOWMANYTRIPS\":9259,\"LAT\":40.7226,\"LON\":-73.9878},{\"HOWMANYTRIPS\":9251,\"LAT\":40.7745,\"LON\":-73.8728},{\"HOWMANYTRIPS\":9101,\"LAT\":40.7639,\"LON\":-73.9542},{\"HOWMANYTRIPS\":9073,\"LAT\":40.7709,\"LON\":-73.8657},{\"HOWMANYTRIPS\":9054,\"LAT\":40.6488,\"LON\":-73.7823},{\"HOWMANYTRIPS\":9023,\"LAT\":40.7701,\"LON\":-73.8645},{\"HOWMANYTRIPS\":8996,\"LAT\":40.7737,\"LON\":-73.8704},{\"HOWMANYTRIPS\":8980,\"LAT\":40.7499,\"LON\":-73.9914},{\"HOWMANYTRIPS\":8973,\"LAT\":40.7641,\"LON\":-73.9542},{\"HOWMANYTRIPS\":8887,\"LAT\":40.7448,\"LON\":-73.9487},{\"HOWMANYTRIPS\":8887,\"LAT\":40.7512,\"LON\":-73.9783},{\"HOWMANYTRIPS\":8872,\"LAT\":40.7627,\"LON\":-73.9678},{\"HOWMANYTRIPS\":8862,\"LAT\":40.749,\"LON\":-73.9919},{\"HOWMANYTRIPS\":8854,\"LAT\":40.7499,\"LON\":-73.9913},{\"HOWMANYTRIPS\":8825,\"LAT\":40.7683,\"LON\":-73.8615},{\"HOWMANYTRIPS\":8783,\"LAT\":40.7417,\"LON\":-73.975},{\"HOWMANYTRIPS\":8751,\"LAT\":40.7496,\"LON\":-73.9953},{\"HOWMANYTRIPS\":8745,\"LAT\":40.6454,\"LON\":-73.7763},{\"HOWMANYTRIPS\":8737,\"LAT\":40.6469,\"LON\":-73.7901},{\"HOWMANYTRIPS\":8708,\"LAT\":40.7678,\"LON\":-73.8612},{\"HOWMANYTRIPS\":8687,\"LAT\":40.7686,\"LON\":-73.862},{\"HOWMANYTRIPS\":8628,\"LAT\":40.7805,\"LON\":-73.9728},{\"HOWMANYTRIPS\":8627,\"LAT\":40.7224,\"LON\":-73.9873},{\"HOWMANYTRIPS\":8624,\"LAT\":40.7704,\"LON\":-73.865},{\"HOWMANYTRIPS\":8618,\"LAT\":40.7681,\"LON\":-73.8615},{\"HOWMANYTRIPS\":8586,\"LAT\":40.7506,\"LON\":-73.9912},{\"HOWMANYTRIPS\":8549,\"LAT\":40.7715,\"LON\":-73.9825},{\"HOWMANYTRIPS\":8534,\"LAT\":40.7498,\"LON\":-73.9916},{\"HOWMANYTRIPS\":8518,\"LAT\":40.7684,\"LON\":-73.9848},{\"HOWMANYTRIPS\":8394,\"LAT\":40.7493,\"LON\":-73.9924},{\"HOWMANYTRIPS\":8390,\"LAT\":40.7716,\"LON\":-73.9826},{\"HOWMANYTRIPS\":8390,\"LAT\":40.7515,\"LON\":-73.9902},{\"HOWMANYTRIPS\":8373,\"LAT\":40.7501,\"LON\":-73.9916},{\"HOWMANYTRIPS\":8371,\"LAT\":40.7745,\"LON\":-73.8721},{\"HOWMANYTRIPS\":8362,\"LAT\":40.751,\"LON\":-73.9908},{\"HOWMANYTRIPS\":8288,\"LAT\":40.7505,\"LON\":-73.9909},{\"HOWMANYTRIPS\":8274,\"LAT\":40.7514,\"LON\":-73.9903},{\"HOWMANYTRIPS\":8253,\"LAT\":40.7489,\"LON\":-73.9914},{\"HOWMANYTRIPS\":8243,\"LAT\":40.75,\"LON\":-73.9912},{\"HOWMANYTRIPS\":8240,\"LAT\":40.6454,\"LON\":-73.7764}].forEach(s \u003d\u003e { \n           geoDataPoints.push(new google.maps.LatLng(s.LAT, s.LON));\n           \n        });\n        return geoDataPoints;\n      }\n\n      function initMap() {\n      \n      var geoData \u003d buildMapData();\n      \n        map \u003d new google.maps.Map(document.getElementById(\u0027mapDiv\u0027), {\n          zoom: 11,\n          center: {lat: 40.74, lng: -73.98},\n          mapTypeId: \u0027roadmap\u0027\n        });\n\n        heatmap \u003d new google.maps.visualization.HeatmapLayer({\n          data: geoData,\n          map: map\n        });\n      }\n\n      function toggleHeatmap() {\n        heatmap.setMap(heatmap.getMap() ? null : map);\n      }\n\n      function changeGradient() {\n        var gradient \u003d [\n          \u0027rgba(0, 255, 255, 0)\u0027,\n          \u0027rgba(0, 255, 255, 1)\u0027,\n          \u0027rgba(0, 191, 255, 1)\u0027,\n          \u0027rgba(0, 127, 255, 1)\u0027,\n          \u0027rgba(0, 63, 255, 1)\u0027,\n          \u0027rgba(0, 0, 255, 1)\u0027,\n          \u0027rgba(0, 0, 223, 1)\u0027,\n          \u0027rgba(0, 0, 191, 1)\u0027,\n          \u0027rgba(0, 0, 159, 1)\u0027,\n          \u0027rgba(0, 0, 127, 1)\u0027,\n          \u0027rgba(63, 0, 91, 1)\u0027,\n          \u0027rgba(127, 0, 63, 1)\u0027,\n          \u0027rgba(191, 0, 31, 1)\u0027,\n          \u0027rgba(255, 0, 0, 1)\u0027\n        ]\n        heatmap.set(\u0027gradient\u0027, heatmap.get(\u0027gradient\u0027) ? null : gradient);\n      }\n\n      function changeRadius() {\n        heatmap.set(\u0027radius\u0027, heatmap.get(\u0027radius\u0027) ? null : 20);\n      }\n\n      function changeOpacity() {\n        heatmap.set(\u0027opacity\u0027, heatmap.get(\u0027opacity\u0027) ? null : 0.2);\n      }\n\n      \n    \u003c/script\u003e\n    \u003cscript async defer src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dAIzaSyDaMDbH-BKjboCl3ohjqsayMa-w335GmpA\u0026libraries\u003dvisualization\u0026callback\u003dinitMap\"\u003e\u003c/script\u003e\n  \u003c/body\u003e\n    \n\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1494582863692_-210004317",
      "id": "20170512-095423_1334826663",
      "dateCreated": "May 12, 2017 9:54:23 AM",
      "dateStarted": "May 12, 2017 9:55:56 AM",
      "dateFinished": "May 12, 2017 9:55:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nprintln(s\"\"\"%html\n\u003ch2\u003e Try your own queries below ....\u003c/h2\u003e\n\u003ch3\u003eYou can always share your thoughts/questions or just encourage us at \u003ca href\u003d\"http://www.snappydata.io/community\" target\u003d\"_blank\"\u003e http://www.snappydata.io/community \u003c/a\u003e\u003c/h3\u003e\n(You can use \u003ca href\u003d\"http://snappydata-slackin.herokuapp.com/\" target\u003d\"_blank\"\u003eslack\u003c/a\u003e,\u003ca href\u003d\"https://gitter.im/SnappyDataInc/snappydata\" target\u003d\"_blank\"\u003eGitter\u003c/a\u003e,\u003ca href\u003d\"http://stackoverflow.com/questions/tagged/snappydata\" target\u003d\"_blank\"\u003estackoverflow \u003c/a\u003e, or \u003ca href\u003d\"https://groups.google.com/forum/#!forum/snappydata-user\" target\u003d\"_blank\"\u003egoogle groups\u003c/a\u003e) \u003cbr\u003e Or, just send an email to chomp@snappydata.io\"\"\") ",
      "user": "anonymous",
      "dateUpdated": "Mar 24, 2017 1:43:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "editorMode": "ace/mode/text",
        "editorHide": true,
        "tableHide": false,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e Try your own queries below ....\u003c/h2\u003e\n\u003ch3\u003eYou can always share your thoughts/questions or just encourage us at \u003ca href\u003d\"http://www.snappydata.io/community\" target\u003d\"_blank\"\u003e http://www.snappydata.io/community \u003c/a\u003e\u003c/h3\u003e\n(You can use \u003ca href\u003d\"http://snappydata-slackin.herokuapp.com/\" target\u003d\"_blank\"\u003eslack\u003c/a\u003e,\u003ca href\u003d\"https://gitter.im/SnappyDataInc/snappydata\" target\u003d\"_blank\"\u003eGitter\u003c/a\u003e,\u003ca href\u003d\"http://stackoverflow.com/questions/tagged/snappydata\" target\u003d\"_blank\"\u003estackoverflow \u003c/a\u003e, or \u003ca href\u003d\"https://groups.google.com/forum/#!forum/snappydata-user\" target\u003d\"_blank\"\u003egoogle groups\u003c/a\u003e) \u003cbr\u003e Or, just send an email to chomp@snappydata.io\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490363012384_-55182621",
      "id": "20170324-134332_252144791",
      "dateCreated": "Mar 24, 2017 1:43:32 PM",
      "dateStarted": "Mar 24, 2017 1:43:40 PM",
      "dateFinished": "Mar 24, 2017 1:43:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Sep 28, 2016 4:22:29 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1475103139330_1821849706",
      "id": "20160928-225219_1276473643",
      "dateCreated": "Sep 28, 2016 4:22:19 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Demo3 - NYCTaxiAnalytics",
  "id": "nyctaxianalytics",
  "angularObjects": {
    "2EA979ZH6:existing_process": [],
    "2E8BS2UKF:shared_process": [],
    "2EA2P371D:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}